// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// Home row mods macro
#define HRML(k1,k2,k3,k4,k5) &ht LC(LS(LALT)) k1 &ht LCTRL k2 &ht LALT k3 &ht LGUI k4 &ht LSHIFT k5
#define HRMR(k1,k2,k3,k4,k5) &ht RSHIFT k1 &ht RGUI k2  &ht LALT k3 &ht RCTRL k4 &ht RC(RS(RALT)) k5

// Layer definitions
#define L1  0 // default layer
#define L2  1 // shift layer
#define L3  2 // symbol layer
#define L4  3 // shift symbol layer = trilayer
#define L5  4 // nav hold layer
#define L6  5 // nav layer

&caps_word {
    continue-list = <UNDERSCORE MINUS>;
};

&mt {
   flavor = "tap-preferred";
   tapping_term_ms = <200>;
};

&sk {
    ignore-modifiers;
    release-after-ms = <2000>;
    quick-release;

};

&sl {
    release-after-ms = <3000>;
};

/ {
    behaviors {
      ht: hold_tap {
          label = "hold_tap";
          compatible = "zmk,behavior-hold-tap";
          #binding-cells = <2>;
          flavor = "tap-preferred";
          tapping-term-ms = <220>;
          quick-tap-ms = <150>;
          global-quick-tap;
          bindings = <&kp>, <&kp>;
      };
    };

   conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <L3 L2>;
            then-layer = <L4>;
        };
// hier komt de tweede tri-layer
    };

    combos {
        compatible = "zmk,combos";

        // both left thumb keys

        combo_settings {
            timeout-ms = <150>;
            key-positions = <30 31>;
            bindings = <&kp SPACE>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        
	default_layer {
            bindings = <
             &kp Q  &kp W   &kp E   &kp R  &kp T      &kp Y    &kp U   &kp I     &kp O    &kp BSPC
            HRML(A,    S,      D,      F,     G)    HRMR(H,       J,      K,        L,       P)
             &kp Z  &kp X   &kp C   &kp V  &kp B      &kp N    &kp M   &kp COMMA &kp DOT  &kp ENTER
                                &mo L3  &kp SPACE   &mo L2  &mo L6
            >;
        };
	
        shift_layer {
            bindings = <
             &kp LS(Q)  &kp LS(W)   &kp LS(E)   &kp LS(R)  &kp LS(T)      &kp LS(Y)    &kp LS(U)   &kp LS(I)     &kp LS(O)    &kp BSPC
             HRML(RS(A),  RS(S),   RS(D),  RS(F),  RS(G))    HRMR(LS(H),   LS(J),  LS(K),   LS(L),  LS(P))
             &kp RS(Z)  &kp RS(X)   &kp RS(C)   &kp RS(V)  &kp RS(B)      &kp LS(N)    &kp LS(M)   &kp LPAR &kp RPAR  &kp ENTER
                                &trans  &trans   &trans  &none
            >;
        };

	symbol_layer {
            bindings = < 
             &kp ESC  &kp AT  &kp HASH  &kp QMARK  &kp EXCL	  &kp TAB  &kp AMPS   &kp SEMI  &kp COLON  &kp BSPC
             HRML(N1, N2, N3, N4, N5)    	  HRMR(N6, N7, N8, N9, N0) 
             &to L5    &kp DQT  &kp SQT  &kp MINUS &kp PLUS 	 &kp STAR   &kp EQUAL  &kp COMMA    &kp DOT    &kp ENTER
                           		  &trans    &trans 	 &trans     &mo L6
            >;
        };

        shiftsymbol_layer {
            bindings = <
   		&kp TILDE  &kp GRAVE &none &kp DLLR  &kp PRCNT       &kp TAB  &kp CARET  &kp LBRC  &kp RBRC  &kp BSPC
   		HRML(LA(N), LA(GRAVE), LA(E), LA(U), LA(I))  	     HRMR(DEL, LS(LA(N2)), LBKT, RBKT, F2)
   		&none  &kp LA(BSLH) &kp LS(LA(BSLH)) &kp UNDER &kp PIPE      &kp BSLH  &kp FSLH  &kp LT &kp GT  &kp ENTER
                                                   &trans   &trans     &trans      &none
            >;
        };

        nav_hold_layer {
            bindings = <
   	     &bt BT_SEL 0   &bt BT_SEL 1  &bt BT_SEL 2   &bt BT_SEL 3  &bt BT_SEL 4     &kp TAB  &kp LG(LBKT)    &kp UP  &kp LG(RBKT)  &kp BSPC 
             &kp LC(LS(LALT))  &kp LCTRL      &kp LALT   &kp LGUI      &kp LSHIFT       &kp DEL      &kp LEFT   &kp DOWN   &kp RIGHT   &kp F2
             &kp K_MUTE        &none   &bt BT_CLR   &none    &bootloader                &bootloader  &kp HOME   &none      &kp END    &kp ENTER
                                              &trans        &trans        &kp RSHIFT       &to L1
            >;
         };

        nav_layer {
            bindings = <
   	     &bt BT_SEL 0   &bt BT_SEL 1  &bt BT_SEL 2   &bt BT_SEL 3  &bt BT_SEL 4     &kp TAB  &kp LG(LBKT)    &kp UP  &kp LG(RBKT)  &kp BSPC 
             &kp LC(LS(LALT))  &kp LCTRL      &kp LALT   &kp LGUI      &kp LSHIFT       &kp DEL      &kp LEFT   &kp DOWN   &kp RIGHT   &kp F2
             &kp K_MUTE        &none   &bt BT_CLR   &none    &none                &none  &kp HOME   &none      &kp END    &to L5
                                              &trans        &trans        &kp RSHIFT       &mo L6
            >;
        };
    };
};
