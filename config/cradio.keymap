// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// Home row mods macro
#define HRMLM(k1,k2,k3,k4,k5) &ht LSHIFT k1 &ht LCTRL k2 &ht LALT k3 &ht LGUI k4 &ht LC(LS(LALT)) k5
#define HRMRM(k1,k2,k3,k4,k5) &ht RC(RS(RALT)) k1 &ht RGUI k2  &ht LALT k3 &ht RCTRL k4 &ht RSHIFT k5
#define HRMLW(k1,k2,k3,k4,k5) &ht LSHIFT k1 &ht LGUI k2 &ht LALT k3 &ht LCTRL k4 &ht LC(LS(LALT)) k5
#define HRMRW(k1,k2,k3,k4,k5) &ht RC(RS(RALT)) k1 &ht RCTRL k2  &ht LALT k3 &ht RGUI k4 &ht RSHIFT k5

// Layer definitions
#define DFLT  0 // default layer
#define WINBASE  1 // windows base layer
#define WINNUM  2 // windows num layer
#define WINSHIFT  3 // windows shift layer
#define WINSYM2  4 // windows symbol2 layer (tri)
#define WINNAV  5 // windows nav layer
#define MACBASE  6 // mac base layer
#define MACCMBASE  7 // mac colemak base layer
#define MACNUM  8 // mac num layer
#define MACSHIFT  9 // mac shift layer
#define MACCMSH  10 // mac colemak shift layer
#define MACSYM2  11 // mac symbol2 layer
#define MACNAV  12 // mac nav layer

&caps_word {
    continue-list = <UNDERSCORE MINUS>;
};

&mt {
   flavor = "tap-preferred";
   tapping_term_ms = <200>;
};

&sk {
    ignore-modifiers;
    release-after-ms = <2000>;
    quick-release;

};

&sl {
    release-after-ms = <3000>;
};

/ {
    behaviors {
      ht: hold_tap {
          label = "hold_tap";
          compatible = "zmk,behavior-hold-tap";
          #binding-cells = <2>;
          flavor = "tap-preferred";
          tapping-term-ms = <220>;
          quick-tap-ms = <150>;
          global-quick-tap;
          bindings = <&kp>, <&kp>;
      };
    };

   conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer1 {
            if-layers = <WINNUM WINSHIFT>;
            then-layer = <WINSYM2>;
        };
    
       compatible = "zmk,conditional-layers";
        tri_layer2 {
            if-layers = <MACNUM MACSHIFT>;
            then-layer = <MACSYM2>;
        };

       compatible = "zmk,conditional-layers";
        tri_layer3 {
            if-layers = <MACNUM MACCMSH>;
            then-layer = <MACSYM2>;
        };
    };

    combos {
        compatible = "zmk,combos";
        // both left thumb keys

    combo_settings {
        timeout-ms = <150>;
        key-positions = <30 31>;
        bindings = <&kp SPACE>;
        };
    };

    macros {
        smijl: smijl {
            label = "ZM_smijl";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp COLON &kp MINUS &kp RPAR>
                ;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        
	default_layer {
            bindings = <
            &none  &none   &none  &none  &bootloader   &bootloader  &none  &none  &none  &none 
            &bt BT_SEL 0   &bt BT_SEL 1  &bt BT_SEL 2   &bt BT_SEL 3  &bt BT_SEL 4   &none  &to WINBASE  &to MACBASE  &to MACCMBASE  &none
            &none  &none &bt BT_CLR   &none  &none  &none  &none  &none  &none  &kp ENTER
                                &none  &kp SPACE   &kp SPACE &none
            >;
        };
	windows_base_layer {
            bindings = <
             &kp Q  &kp W   &kp E   &kp R  &kp T      &kp Y    &kp U   &kp I     &kp O    &kp BSPC
            HRMLW(A,    S,      D,      F,     G)    HRMRW(H,       J,      K,        L,       P)
             &kp Z  &kp X   &kp C   &kp V  &kp B      &kp N    &kp M   &kp COMMA &kp DOT  &kp ENTER
                                &mo WINNUM  &kp SPACE   &mo WINSHIFT  &mo WINNAV
            >;
        };
	
	windows_num_layer {
            bindings = < 
             &kp LC(LA(E)) &kp AT  &kp HASH  &kp COLON  &kp SEMI	  &kp TAB  &kp N7   &kp N8  &kp N9  &kp BSPC
             HRMLW(LPAR, DQT, SQT, QMARK, EXCL)    	  HRMRW(FSLH, N4, N5, N6, RPAR) 
             &kp PRCNT   &kp AMPS  &kp EQUAL  &kp MINUS &kp PLUS 	 &kp STAR   &kp N1  &ht COMMA N2  &ht DOT N3  &kp ENTER
                           		  &mo WINNUM    &none 	 &mo WINSHIFT  &kp N0
            >;
        };

    windows_shift_layer {
            bindings = <
             &kp RS(Q)      &kp RS(W)   &kp RS(E)   &kp RS(R)   &kp RS(T)     &kp LS(Y)     &kp LS(U)   &kp LS(I)   &kp LS(O)   &kp BSPC
             HRMLW(RS(A),   RS(S),      RS(D),      RS(F),      RS(G))      HRMRW(LS(H),    LS(J),      LS(K),      LS(L),     LS(P))
             &kp RS(Z)      &kp RS(X)   &kp RS(C)   &kp RS(V)   &kp RS(B)     &kp LS(N)     &kp LS(M)   &kp FSLH    &smijl   &kp LS(ENTER)
                                &mo WINNUM  &none   &mo WINSHIFT  &none
            >;
        };

    windows_symbol2_layer {
        bindings = <
   	    	&none  &none &none &none  &none       &none  &kp CARET  &none  &none  &kp BSPC
   		    HRMLW(LPAR, LBRC, LT , LBKT, LA(BSLH))    HRMRW(LS(LA(BSLH)), RBKT, GT, RBRC, RPAR)
   		    &kp TILDE  &kp GRAVE  &kp DLLR &kp UNDER &kp PIPE    &none &none &kp BSLH  &none &none
                                 &mo WINNUM   &none &mo WINSHIFT  &none
            >;
        };

        windows_nav_layer {
            bindings = <
   	        &kp LA(F4)  &kp F2   &none  &none  &kp F5   &kp TAB  &kp LC(LEFT)    &kp UP  &kp LC(RIGHT)  &kp LC(BSPC) 
            &kp LSHIFT  &kp LGUI   &kp LALT  &kp LCTRL  &kp LC(LS(LALT))   &kp DEL      &kp LEFT   &kp DOWN   &kp RIGHT   &kp PG_UP
            &none       &none   &none   &kp LS(LG(S))    &none      &none  &kp HOME   &none    &kp END    &kp PG_DN
                                              &to DFLT   &kp SPACE    &none    &mo WINNAV
            >;
        };

	    mac_base_layer {
            bindings = <
            &kp Q  &kp W   &kp E   &kp R  &kp T      &kp Y    &kp U   &kp I     &kp O    &kp BSPC
            HRMLM(A,    S,      D,      F,     G)    HRMRM(H,       J,      K,        L,       P)
            &kp Z  &kp X   &kp C   &kp V  &kp B      &kp N    &kp M   &kp COMMA &kp DOT  &kp ENTER
                          &mo MACNUM  &kp SPACE   &mo MACSHIFT  &mo MACNAV 
            >;
        };
	
	    mac_colemak_base_layer {
            bindings = <
            &kp Q  &kp W   &kp F   &kp P  &kp B      &kp J    &kp L   &kp U     &kp Y    &kp BSPC
            HRMLM(A,    R,      S,      T,     G)    HRMRM(M,       N,      E,        I,       O)
            &kp Z  &kp X   &kp C   &kp D  &kp V      &kp K    &kp H   &kp COMMA &kp DOT  &kp ENTER
                          &mo MACNUM  &kp SPACE   &mo MACCMSH  &mo MACNAV 
            >;
        };
	
    	mac_num_layer {
            bindings = < 
             &kp LS(LA(N2)) &kp AT  &kp HASH  &kp COLON  &kp SEMI	  &kp TAB  &kp N7   &kp N8  &kp N9  &kp BSPC
             HRMLM(LPAR, DQT, SQT, QMARK, EXCL)    	  HRMRM(FSLH, N4, N5, N6, RPAR) 
             &kp PRCNT   &kp AMPS  &kp EQUAL  &kp MINUS &kp PLUS 	 &kp STAR   &kp N1  &ht COMMA N2    &ht DOT N3    &kp ENTER
                           		  &mo MACNUM    &none 	 &mo MACSHIFT   &kp N0
            >;
        };

	mac_shift_layer {
            bindings = <
             &kp RS(Q)  &kp RS(W)   &kp RS(E)   &kp RS(R)  &kp RS(T)      &kp LS(Y)    &kp LS(U)   &kp LS(I)     &kp LS(O)    &kp BSPC
             HRMLM(RS(A),  RS(S),   RS(D),  RS(F),  RS(G))    HRMRM(LS(H),   LS(J),  LS(K),   LS(L),  LS(P))
             &kp RS(Z)  &kp RS(X)   &kp RS(C)   &kp RS(V)  &kp RS(B)      &kp LS(N)    &kp LS(M)   &kp FSLH &smijl  &kp LS(ENTER)
                                &mo MACNUM  &kp SPACE   &mo MACSHIFT  &none
            >;
        };

	mac_colem_shift_layer {
            bindings = <
             &kp RS(Q)  &kp RS(W)   &kp RS(F)   &kp RS(P)  &kp RS(B)      &kp LS(J)    &kp LS(L)   &kp LS(U)     &kp LS(Y)    &kp BSPC
             HRMLM(RS(A),  RS(R),   RS(S),  RS(T),  RS(G))    HRMRM(LS(M),   LS(N),  LS(E),   LS(I),  LS(O))
             &kp RS(Z)  &kp RS(X)   &kp RS(C)   &kp RS(D)  &kp RS(V)      &kp LS(K)    &kp LS(H)   &kp FSLH &smijl  &kp LS(ENTER)
                                &mo MACNUM  &kp SPACE   &mo MACCMSH  &none
            >;
        };

    mac_symbol2_layer {
        bindings = <
   	    	&kp LA(N)  &kp LA(GRAVE) &kp LA(E) &kp LA(U) &kp LA(I)       &none  &kp CARET  &none  &none  &kp BSPC
   		    HRMLM(LPAR, LBRC, LT, LBKT, LA(BSLH))  	   HRMRM(LS(LA(BSLH)), RBKT, GT, RBRC, RPAR)
   		    &kp TILDE  &kp GRAVE &kp DLLR &kp UNDER &kp PIPE    &none &none  &kp BSLH  &none &none
                                       &mo MACNUM   &none     &mo MACSHIFT   &none
            >;
        };

    nav_layer {
        bindings = <
   	    &kp LG(Q)  &kp F2 &none  &none  &kp LG(R)    &kp TAB  &kp LG(LBKT)    &kp UP  &kp LG(RBKT)  &kp LA(BSPC) 
        &kp LSHIFT  &kp LCTRL     &kp LALT   &kp LGUI   &kp LC(LS(LALT))    &kp DEL  &kp LEFT   &kp DOWN   &kp RIGHT   &kp LA(UP)
        &none    &none   &none  &kp RG(RS(4))  &none     &none  &kp LG(LEFT)   &none      &kp LG(RIGHT)    &kp LA(DOWN)
                           &to DFLT     &kp SPACE        &none       &mo MACNAV
        >;
    };
};
