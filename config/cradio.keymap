// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// Home row mods macro
#define HRML(k1,k2,k3,k4) &ht LC(LS(LALT)) k1 &ht LCTRL k2 &ht LALT k3 &ht LGUI k4
#define HRMR(k2,k3,k4,k5) &ht RGUI k2  &ht LALT k3 &ht RCTRL k4 &ht RC(RS(RALT)) k5

// Layer definitions
#define QWRT 0
#define LEF 1
#define RIG  2
#define TRI 3
#define RES 4

&caps_word {
    continue-list = <UNDERSCORE MINUS>;
};

&mt {
   flavor = "tap-preferred";
   tapping_term_ms = <200>;
};

&sk {
    ignore-modifiers;
    release-after-ms = <2000>;
    quick-release;

};

&sl {
    release-after-ms = <3000>;
};

/ {
    behaviors {
      ht: hold_tap {
          label = "hold_tap";
          compatible = "zmk,behavior-hold-tap";
          #binding-cells = <2>;
          flavor = "tap-preferred";
          tapping-term-ms = <200>;
          quick-tap-ms = <150>;
          global-quick-tap;
          bindings = <&kp>, <&kp>;
      };
    };

   conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <LEF RIG>;
            then-layer = <TRI>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // both left thumb keys

        combo_settings {
            timeout-ms = <150>;
            key-positions = <30 31>;
            bindings = <&kp SPACE>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        
	default_layer {
            bindings = <
             &kp   Q  &kp W   &kp E   &kp R  &kp T       &kp Y   &kp  U   &kp I     &kp O    &kp P
             &kp A &kp S &kp D  &kp F   &kp G    &kp H   &kp J  &kp  K    &kp  L  &kp  BSPC  
             &kp   Z  &kp X   &kp C   &kp V  &kp B       &kp N   &kp  M   &kp COMMA &kp DOT  &kp ENTER
                                &lt LEF TAB  &kp SPACE   &kp RSHIFT  &lt RIG TAB
            >;
        };

        left_layer {
            bindings = < 
             &kp EXCL   &kp AT  &kp HASH  &kp DLLR  &kp PRCNT	  &kp CARET  &kp AMPS   &kp SEMI  &kp COLON  &kp QUESTION
             &kp N1 &kp  N2  &kp  N3     &kp  N4       &kp N5   	 &kp N6  &kp  N7 &kp N8 &kp N9 &kp N0 
             &kp ESC    &kp DQT &kp SQT   &kp MINUS &kp PLUS 	 &kp STAR   &kp EQUAL  &trans    &trans     &kp LS(ENTER)
                           		  &trans    &trans 	 &trans     &trans
            >;
        };

        right_layer {
            bindings = <
   &kp TILDE &kp RBRC &kp RBKT &kp RPAR &kp BSLH        &kp LA(DEL) &kp LG(LBKT) &kp UP      &kp LG(RBKT) &kp F2
   &kp GRAVE &kp LBRC &kp LBKT &kp LPAR &kp FSLH        &kp DEL     &kp LEFT     &kp DOWN    &kp RIGHT    &kp LA(BSPC)
   &kp LT    &kp LS(LA(N2)) &kp GT &kp UNDER &kp PIPE   &kp CAPS    &kp HOME     &kp LA(BSLH) &kp END     &kp LS(LA(BSLH))
                                                   &trans   &mt LSHIFT SPACE     &trans      &trans
            >;
        };

//        tri_layer {
//            bindings = <
//   	     &kp LA(N)         &kp LA(GRAVE)  &kp LA(E)     &kp LA(U)      &kp LA(I)     &kp C_PREV  &kp C_PP     &kp C_NEXT  &kp C_VOL_UP   &kp C_BRI_UP
//             &out OUT_TOG  &bt BT_SEL 0       &bt BT_SEL 1 &bt BT_SEL 2   &bt BT_SEL 3   &none       &none        &none       &kp C_VOL_DN   &kp C_BRI_DEC
//             &none             &bt BT_SEL 4   &bt BT_CLR   &bootloader    &reset         &reset      &bootloader  &none       &kp C_MUTE     &none
//                                              &trans        &trans        &trans         &trans
//            >;
//        };
//
//        reserve_layer {
//            bindings = <
//  	     &kp STAR  &kp STAR  &kp STAR  &kp STAR  &kp STAR     &kp STAR  &kp STAR  &kp STAR  &kp STAR  &kp STAR
//  	     &kp STAR  &kp STAR  &kp STAR  &kp STAR  &kp STAR     &kp STAR  &kp STAR  &kp STAR  &kp STAR  &kp STAR
//  	     &kp STAR  &kp STAR  &kp STAR  &kp STAR  &kp STAR     &kp STAR  &kp STAR  &kp STAR  &kp STAR  &kp STAR
//  	                                     &trans    &trans     &trans    &trans
//            >;
//        };
    };
};
