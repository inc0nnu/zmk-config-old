// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// Home row mods macro
#define HRML(k1,k2,k3,k4,k5) &ht LC(LS(LALT)) k1 &ht LCTRL k2 &ht LALT k3 &ht LGUI k4 &ht LSHIFT k5
#define HRMR(k1,k2,k3,k4,k5) &ht RSHIFT k1 &ht RGUI k2  &ht LALT k3 &ht RCTRL k4 &ht RC(RS(RALT)) k5

// Layer definitions
#define QWE  0
#define NAV  1
#define LEF  2
#define RIG  3
#define TRI  4

&caps_word {
    continue-list = <UNDERSCORE MINUS>;
};

&mt {
   flavor = "tap-preferred";
   tapping_term_ms = <200>;
};

&sk {
    ignore-modifiers;
    release-after-ms = <2000>;
    quick-release;

};

&sl {
    release-after-ms = <3000>;
};

/ {
    behaviors {
      ht: hold_tap {
          label = "hold_tap";
          compatible = "zmk,behavior-hold-tap";
          #binding-cells = <2>;
          flavor = "tap-preferred";
          tapping-term-ms = <220>;
          quick-tap-ms = <150>;
          global-quick-tap;
          bindings = <&kp>, <&kp>;
      };
    };

   conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <LEF RIG>;
            then-layer = <TRI>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // both left thumb keys

        combo_settings {
            timeout-ms = <150>;
            key-positions = <30 31>;
            bindings = <&kp SPACE>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        
	default_layer {
            bindings = <
             &kp   Q  &kp W   &kp E   &kp R  &kp T       &kp Y   &kp  U   &kp I     &kp O    &kp BSPC
             HRML(A, S, D, F, G)    HRMR(H, J,  K,  L,  P)
             &kp Z  &kp X   &kp C   &kp V  &kp B       &kp N   &kp  M   &kp COMMA &kp DOT  &kp ENTER
                                &kp LEF  &kp SPACE   &kp RSHIFT  &kp RIG
            >;
        };

        nav_layer {
            bindings = <
  	     &kp BSPC  &kp N1  &kp N2  &kp N3  &kp TAB     &kp TAB  &to QWE  &kp UP  &none  &kp BSPC
  	     HRML(SQT, N4, N5, N6, DEL)     &kp DEL  &kp LEFT  &kp DOWN  &kp RIGHT  &kp F2
  	     &kp ENTER  &kp N7  &kp N8  &kp N9  &kp N0     &none  &kp HOME  &none  &kp END  &kp ENTER
  	                                     &none    &kp SPACE     &kp RSHIFT    &none
            >;
        };
        
	left_layer {
            bindings = < 
             &kp ESC  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT	  &kp TAB  &kp AMPS   &kp SEMI  &kp COLON  &kp BSPC
             HRML(N1, N2, N3, N4, N5)    	  HRMR(N6, N7, N8, N9, N0) 
             &none    &kp BSLH &kp FSLH  &kp MINUS &kp PLUS 	 &kp STAR   &kp EQUAL  &kp COMMA    &kp DOT    &kp ENTER
                           		  &trans    &trans 	 &trans     &trans
            >;
        };

        right_layer {
            bindings = <
   		&kp ESC  &kp RBRC &kp LBRC &kp TILDE &kp GRAVE       &kp TAB  &to NAV  &kp LBKT  &kp RBKT  &kp BSPC
   		HRML(LG(N1), LG(N2), QMARK, EXCL, LS(LA(N2)))  	     HRMR(DEL, LS(LA(LEFT)), LPAR, RPAR, F2)
   		&none  &kp LA(BSLH) &kp LS(LA(BSLH)) &kp UNDER &kp PIPE      &kp STAR  &kp EQUAL  &kp SQT &kp DQT  &kp ENTER
                                                   &trans   &kp SPACE     &trans      &trans
            >;
        };

        tri_layer {
            bindings = <
   	     &kp LA(N)         &kp LA(GRAVE)  &kp LA(E)     &kp LA(U)      &kp LA(I)     &kp C_PREV  &kp C_PP     &kp C_NEXT  &kp C_VOL_UP   &kp C_BRI_UP
             &out OUT_TOG  &bt BT_SEL 0       &bt BT_SEL 1 &bt BT_SEL 2   &bt BT_SEL 3   &none       &kp LS(LG(N4))  &none    &kp C_VOL_DN   &kp C_BRI_DEC
             &none             &bt BT_SEL 4   &bt BT_CLR   &bootloader    &reset         &reset      &bootloader  &none       &kp C_MUTE     &none
                                              &trans        &trans        &trans         &trans
            >;
        };

    };
};
